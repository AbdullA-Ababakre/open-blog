{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","pages/AllQuotes.js"],"names":["module","exports","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","quotes","ascending","history","useHistory","location","useLocation","isAsc","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","list","map","quote","DummyQuotes","AllQuotes"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,gCCD5C,SAASC,EAAgBC,EAAKC,EAAKC,GAYhD,OAXID,KAAOD,EACTG,OAAOC,eAAeJ,EAAKC,EAAK,CAC9BC,MAAOA,EACPG,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZP,EAAIC,GAAOC,EAGNF,E,wDCUMQ,EAhBG,SAACC,GACjB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAD,CAAMJ,UAAU,MAAMK,GAAE,kBAAaN,EAAMO,IAA3C,iC,iBCmCSC,EA7CG,SAACR,GAAW,IAAD,EAQPS,EAAQC,EANtBC,EAAUC,cACVC,EAAWC,cAGXC,EAA8B,QADtB,IAAIC,gBAAgBH,EAASI,QACvBC,IAAI,QAiBlBC,GAfcV,EAeYT,EAAMS,OAfVC,EAeiBK,EAdpCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOd,GAAKe,EAAOf,GAAK,GAAK,EAE7Bc,EAAOd,GAAKe,EAAOf,GAAK,GAAK,MAa1C,OACE,eAAC,WAAD,WACE,qBAAKN,UAAWC,IAAQqB,QAAxB,SACE,yBAAQC,QAXe,WAC3Bb,EAAQc,KAAK,iBAAmBV,EAAQ,OAAS,SAU7C,kBAA6CA,EAAQ,OAAS,WAEhE,uBAAId,UAAWC,IAAQwB,MAAvB,gBAAwCxB,IAAQwB,MAAhD,eACGP,EAAaQ,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEErB,GAAIqB,EAAMrB,GACVF,OAAQuB,EAAMvB,OACdD,KAAMwB,EAAMxB,MAHPwB,EAAMrB,QAHjB,QClCAsB,EAAc,CAChB,CAACtB,GAAG,KAAKF,OAAO,UAAUD,KAAK,yBAC/B,CAACG,GAAG,KAAKF,OAAO,kBAAkBD,KAAK,2BACvC,CAACG,GAAG,KAAKF,OAAO,sBAAsBD,KAAK,8BAOhC0B,UAJG,WAChB,OAAO,cAAC,EAAD,CAAWrB,OAAQoB","file":"static/js/5.dee27b50.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import classes from './QuoteItem.module.css';\nimport { Link } from 'react-router-dom';\n\n\n\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link className='btn' to={`/quotes/${props.id}`}>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom'\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst QuoteList = (props) => {\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const query = new URLSearchParams(location.search);\n  const isAsc = query.get('sort') === 'asc';\n\n  const sortQuotes = (quotes, ascending) => {\n    return quotes.sort((quoteA, quoteB) => {\n      if (ascending) {\n        return quoteA.id > quoteB.id ? 1 : -1;\n      } else {\n        return quoteA.id < quoteB.id ? 1 : -1;\n      }\n    });\n  };\n\n  const changeSortingHandler = () => {\n    history.push('/quotes?sort=' + (isAsc ? 'desc' : 'asc'));\n  }\n\n\n  const sortedQuotes = sortQuotes(props.quotes,isAsc);\n\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>Sort {isAsc ? 'desc' : 'asc'}</button>\n      </div>\n      <ul className={classes.list} className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import QuoteList from '../components/quotes/QuoteList'\n\nconst DummyQuotes = [\n    {id:'q1',author:'Abdulla',text:\"learning react is fun\"},\n    {id:'q2',author:'AbdullaAbabakre',text:\"learning react is Great\"},\n    {id:'q3',author:'AbdullaAbabakreAmat',text:\"learning react is greater\"},\n]\n\nconst AllQuotes = ()=>{\n  return <QuoteList quotes={DummyQuotes} />\n}\n\nexport default AllQuotes;"],"sourceRoot":""}